<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:models="clr-namespace:WPFPages.ViewModels"
      xmlns:att="clr-namespace:WPFPages.AttachedProperties"
	xmlns:views="clr-namespace:WPFPages.Views">
	<!--This ia good working Working Style for NW Suppliers/others DataGrid-->
	
	<Style x:Key="NWSuppliersGridStyle" TargetType="DataGridCell" BasedOn="{StaticResource {x:Type DataGridCell}}">
		<Setter Property="Background" Value="{Binding (views:DataGridColorCtrlAp.Background), RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
		<Setter Property="Height" Value="{Binding (views:DataGridColorCtrlAp.ItemHeight), RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<Setter Property="Padding" Value="2 5 2 3"/>
		<Style.Triggers> 

			<!-- NOT SELECTED,  MOUSEOVER / FALSE-->
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsSelected}" Value="false" />
					<Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=DataGridRow}, Path=IsMouseOver}" Value="false" />
				</MultiDataTrigger.Conditions>
				<MultiDataTrigger.Setters>
					<Setter Property="Background" Value="{Binding (views:DataGridColorCtrlAp.Background), RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
					<Setter Property="TextElement.Foreground" Value="{Binding (views:DataGridColorCtrlAp.Foreground), RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
					<Setter Property="TextElement.FontWeight" Value="{Binding (views:DataGridColorCtrlAp.FontWeight), RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
				</MultiDataTrigger.Setters>
			</MultiDataTrigger>

			<!-- NOT SELECTED,  MOUSEOVER / TRUE-->
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsSelected}" Value="false" />
					<Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=DataGridRow}, Path=IsMouseOver}" Value="True" />
				</MultiDataTrigger.Conditions>
				<MultiDataTrigger.Setters>
					<Setter Property="Background" Value="{Binding (views:DataGridColorCtrlAp.BackgroundMouseover), RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
					<Setter Property="TextElement.Foreground" Value="{Binding (views:DataGridColorCtrlAp.ForegroundMouseover), RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
					<Setter Property="TextElement.FontWeight" Value="{Binding (views:DataGridColorCtrlAp.FontWeight), RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
				</MultiDataTrigger.Setters>
			</MultiDataTrigger>

			<!-- SELECTED,  MOUSEOVER / FALSE-->
			<!--1, True, False -->
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<!--<Condition Binding="{Binding AcType}" Value="1"/>-->
					<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsSelected}" Value="true" />
					<Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=DataGridRow}, Path=IsMouseOver}" Value="False" />
				</MultiDataTrigger.Conditions>
				<MultiDataTrigger.Setters>
					<Setter Property="Background" Value="{Binding (views:DataGridColorCtrlAp.BackgroundSelected), RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
					<Setter Property="TextElement.Foreground" Value="{Binding (views:DataGridColorCtrlAp.ForegroundSelected), RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
					<Setter Property="TextElement.FontWeight" Value="{Binding (views:DataGridColorCtrlAp.FontWeightSelected), RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
					<Setter Property="FontWeight" Value="Medium"/>
				</MultiDataTrigger.Setters>
			</MultiDataTrigger>

			<!-- IS SELECTED,  MOUSEOVER / TRUE-->
			<!--1, False, True -->
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsSelected}" Value="true" />
					<Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=DataGridRow}, Path=IsMouseOver}" Value="True" />
				</MultiDataTrigger.Conditions>
				<MultiDataTrigger.Setters>
					<Setter Property="Background" Value="{Binding (views:DataGridColorCtrlAp.BackgroundMouseoverSelected), RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
					<Setter Property="Foreground" Value="{Binding (views:DataGridColorCtrlAp.ForegroundMouseoverSelected), RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
					<Setter Property="TextElement.FontWeight" Value="{Binding (views:DataGridColorCtrlAp.FontWeightSelected), RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
				</MultiDataTrigger.Setters>
			</MultiDataTrigger>    	
		</Style.Triggers>
	</Style>


	<!--// Style  for A list Box/View ITEM control-->
    <!--This style handles theforeground & Background colors of this "Wrapped" listbox-->
    <!--Assign it as :ItemContainerStye ={StaticResource ListBoxDataTemplate}-->
    
    <!--// This ia good working listbox/view item control style 
            that has DataTemplate for the***  NW Customer Db ***
            and uses the AP AttachedProperties Class internally for all color control-->
      <Style x:Key="ListBoxColorControlTemplate" TargetType="{x:Type ListBoxItem}">
            <Setter Property="Height" Value="{Binding (views:ListboxColorCtrlAP.ItemHeight),  RelativeSource={RelativeSource AncestorType=ListBox}}"/>
            <!--<Setter Property="DropShadow.Color" Value="{Binding (views:ListboxColorCtrlAP.Background),  RelativeSource={RelativeSource AncestorType=ListBox}}"/>-->

            <Setter Property="Template">

                  <Setter.Value>

                        <ControlTemplate TargetType="{x:Type ListBoxItem}">
                              <!--//++++++++++++++++++++++++++++++++//-->
                              <!--// Control Template for NW Customer Db-->
                              <!--//++++++++++++++++++++++++++++++++//-->
                                    <Border x:Name="Bd" 
                                            BorderBrush="{TemplateBinding BorderBrush}" 
                                            BorderThickness="{TemplateBinding BorderThickness}"                                             
                                            Padding="{TemplateBinding Padding}" 
                                            SnapsToDevicePixels="true" 
                                            Height="{Binding Path=ItemHeight, ElementName=listboxcontrol}">
                                          <Border.Background>
                                                <SolidColorBrush x:Name="borderbckgrnd" Color="{TemplateBinding Background}" />
                                          </Border.Background>
                                          <ContentPresenter x:Name="contentpresenter"                                                            
                                                Height="{Binding ActualHeight, ElementName=Bd}"                                                
                                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"   
                                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"   
                                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                          </ContentPresenter>
                                    </Border>

                              <!--#region Triggers-->
                              <ControlTemplate.Triggers>
                                    <!--The TextElement.Foreground is the magic line to get the text color under control-->
                                    <!--// These only work on TextBlocks, and NOT on TextBoxes for some reason-->
    
                                    <!--NOT Selected, No Mouse-->
                                    <MultiTrigger>
                                          <MultiTrigger.Conditions>
                                                <Condition Property="IsMouseOver" Value="false"/>
                                                <Condition Property="IsSelected" Value="false"/>
                                          </MultiTrigger.Conditions>
                                          <Setter Property="Background" TargetName="Bd" Value="{Binding (views:ListboxColorCtrlAP.Background), RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}"/>
                                          <Setter Property="BorderBrush" TargetName="Bd" Value="{Binding (views:ListboxColorCtrlAP.Background), RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}"/>
                                          <Setter Property="TextElement.Foreground" Value="{Binding (views:ListboxColorCtrlAP.Foreground), RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}"/>
                                          <Setter Property="TextElement.FontWeight" Value="{Binding Path=(views:ListboxColorCtrlAP.FontWeight), RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}"/>
                                          <Setter Property="TextElement.FontSize" Value="{Binding Path=(views:ListboxColorCtrlAP.FontSize), RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}"/>
                                    </MultiTrigger>
                                    <!--NOT Selected, Mouse OVER-->
                                    <MultiTrigger>
                                          <MultiTrigger.Conditions>
                                                <Condition Property="IsMouseOver" Value="true"/>
                                                <Condition Property="IsSelected" Value="false"/>
                                          </MultiTrigger.Conditions>
                                          <Setter Property="Background" TargetName="Bd" Value="{Binding (views:ListboxColorCtrlAP.MouseoverBackground), RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}"/>
                                          <Setter Property="BorderBrush" TargetName="Bd" Value="{Binding (views:ListboxColorCtrlAP.MouseoverBackground), RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}"/>
                                          <Setter Property="TextElement.Foreground" Value="{Binding (views:ListboxColorCtrlAP.MouseoverForeground), RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}"/>
                                          <Setter Property="TextElement.FontWeight" Value="{Binding Path=(views:ListboxColorCtrlAP.FontWeight), RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}"/>
                                          <Setter Property="TextElement.FontSize" Value="{Binding Path=(views:ListboxColorCtrlAP.FontSize), RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}"/>
                                    </MultiTrigger>

                                    <!--IS Selected, No Mouse-->
                                    <MultiTrigger>
                                          <MultiTrigger.Conditions>
                                                <Condition Property="IsMouseOver" Value="false"/>
                                                <Condition Property="IsSelected" Value="true"/>
                                          </MultiTrigger.Conditions>
                                          <Setter Property="Background" TargetName="Bd" Value="{Binding (views:ListboxColorCtrlAP.SelectionBackground), RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}"/>
                                          <Setter Property="BorderBrush" TargetName="Bd" Value="{Binding (views:ListboxColorCtrlAP.SelectionBackground), RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}"/>
                                          <Setter Property="TextElement.Foreground" Value="{Binding (views:ListboxColorCtrlAP.SelectionForeground), RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}"/>
                                          <Setter Property="TextElement.FontWeight" Value="{Binding Path=(views:ListboxColorCtrlAP.FontWeightSelected), RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}"/>
                                          <Setter Property="TextElement.FontSize" Value="{Binding Path=(views:ListboxColorCtrlAP.FontSize), RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}"/>

                                    </MultiTrigger>

                                    <!--IS Selected, Mouse OVER-->
                                    <MultiTrigger>
                                          <MultiTrigger.Conditions>
                                                <Condition Property="IsMouseOver" Value="True"/>
                                                <Condition Property="IsSelected" Value="true"/>
                                          </MultiTrigger.Conditions>
                                          <Setter Property="Background" TargetName="Bd" Value="{Binding (views:ListboxColorCtrlAP.MouseoverSelectedBackground), RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}"/>
                                          <Setter Property="BorderBrush" TargetName="Bd" Value="{Binding (views:ListboxColorCtrlAP.MouseoverSelectedBackground), RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}"/>
                                          <Setter Property="TextElement.Foreground" Value="{Binding (views:ListboxColorCtrlAP.MouseoverSelectedForeground), RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}"/>
                                          <Setter Property="TextElement.FontWeight" Value="{Binding Path=(views:ListboxColorCtrlAP.FontWeightSelected), RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}"/>
                                          <Setter Property="TextElement.FontSize" Value="{Binding Path=(views:ListboxColorCtrlAP.FontSize), RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}"/>
                                    </MultiTrigger>

                                    <Trigger Property="IsEnabled" Value="False">
                                          <Setter Property="TextElement.Foreground" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                    </Trigger>


                              </ControlTemplate.Triggers>

                              <!--#endregion Triggers-->

                        </ControlTemplate>

                  </Setter.Value>
            </Setter>
      </Style>



	<!--NOT IN USE-->
	<Style x:Key="ListBoxDataTemplate" TargetType="{x:Type ListBoxItem}">
		<Setter Property="SnapsToDevicePixels" Value="True"/>
		<Setter Property="Padding" Value="4,1"/>
		<Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
		<Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
		<Setter Property="Background" Value="{Binding Background}"/>
		<Setter Property="BorderThickness" Value="{Binding BorderThickness}"/>
		<Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
		<Setter Property="FontSize" Value="{Binding FontSize}"/>

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ListBoxItem}" x:Name="ListboxitemControltemplate">
					<Border x:Name="Bd" 
                                            BorderBrush="{TemplateBinding BorderBrush}" 
                                            BorderThickness="{TemplateBinding BorderThickness}"                                             
                                            Padding="{TemplateBinding Padding}" 
                                            SnapsToDevicePixels="true" 
                                            Height="{Binding Path=ItemHeight, ElementName=listboxwindow}">
						<Border.Background>
							<SolidColorBrush x:Name="borderbckgrnd" Color="{TemplateBinding Background}" />
						</Border.Background>
						<ContentPresenter x:Name="contentpresenter"                                                            
                                                            Height="{Binding ActualHeight, ElementName=Bd}"                                                
                                                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"   
                                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"   
                                                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
						</ContentPresenter>

					</Border>
					<ControlTemplate.Triggers>

						<!--The TextElement.Foreground is the magic line to get the text color under control-->
						<!--// These only work on TextBlocks, and NOT on TextBoxes for some reason-->

						<!--NOT Selected, No Mouse-->
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver" Value="false"/>
								<Condition Property="IsSelected" Value="false"/>
							</MultiTrigger.Conditions>
							<Setter Property="Background" TargetName="Bd" Value="{Binding Path=Background, ElementName=listboxwindow}"/>
							<Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Black0}"/>
							<Setter Property="TextElement.Foreground" Value="{Binding Path=Foreground, ElementName=listboxwindow}"/>
							<Setter Property="TextElement.FontWeight" Value="{Binding Path=FontWeight, ElementName=listboxwindow}"/>
							<Setter Property="TextElement.FontSize" Value="{Binding Path=FontSize, ElementName=listboxwindow}"/>
						</MultiTrigger>

						<!--NOT Selected, Mouse OVER-->
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver" Value="true"/>
								<Condition Property="IsSelected" Value="false"/>
							</MultiTrigger.Conditions>
							<Setter Property="Background" TargetName="Bd" Value="{Binding Path=MouseoverBackground, ElementName=listboxwindow}"/>
							<Setter Property="BorderBrush" TargetName="Bd" Value="{Binding Path=MouseoverBackground, ElementName=listboxwindow}"/>
							<Setter Property="TextElement.Foreground" Value="{Binding Path=MouseoverForeground, ElementName=listboxwindow}"/>
							<Setter Property="TextElement.FontWeight" Value="{Binding Path=FontWeightSelected, ElementName=listboxwindow}"/>
							<Setter Property="TextElement.FontSize" Value="{Binding Path=FontSize, ElementName=listboxwindow}"/>
						</MultiTrigger>

						<!--IS Selected, No Mouse-->
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver" Value="false"/>
								<Condition Property="IsSelected" Value="true"/>
							</MultiTrigger.Conditions>
							<Setter Property="Background" TargetName="Bd" Value="{Binding Path=SelectionBackground, ElementName=listboxwindow}"/>
							<Setter Property="BorderBrush" TargetName="Bd" Value="{Binding Path=SelectionForeground, ElementName=listboxwindow}"/>
							<Setter Property="TextElement.Foreground" Value="{Binding Path=SelectionForeground, ElementName=listboxwindow}"/>
							<Setter Property="TextElement.FontWeight" Value="{Binding Path=FontWeightSelectedMouseover, ElementName=listboxwindow}"/>
							<Setter Property="TextElement.FontSize" Value="{Binding Path=FontSize, ElementName=listboxwindow}"/>

						</MultiTrigger>

						<!--IS Selected, Mouse OVER-->
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver" Value="True"/>
								<Condition Property="IsSelected" Value="true"/>
							</MultiTrigger.Conditions>
							<Setter Property="Background" TargetName="Bd" Value="{Binding Path=MouseoverSelectedBackground, ElementName=listboxwindow}"/>
							<Setter Property="BorderBrush" TargetName="Bd" Value="{Binding Path=MouseoverSelectedBackground, ElementName=listboxwindow}"/>
							<Setter Property="TextElement.Foreground" Value="{Binding Path=MouseoverSelectedForeground, ElementName=listboxwindow}"/>
							<Setter Property="TextElement.FontWeight" Value="{Binding Path=FontWeightSelectedMouseover, ElementName=listboxwindow}"/>
							<Setter Property="TextElement.FontSize" Value="{Binding Path=FontSize, ElementName=listboxwindow}"/>
						</MultiTrigger>

						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="TextElement.Foreground" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
						</Trigger>

						<!--//Sadly, These do NOT work-->
						<!--<EventTrigger RoutedEvent="Border.MouseEnter">
                                          <BeginStoryboard>
                                                <Storyboard>
                                                      <DoubleAnimation 
                                                          Storyboard.TargetName="Bd" 
                                                          Storyboard.TargetProperty="(Border.Opacity)"
                                                                   To="0.0" Duration="0:0:0.3"/>
                                                </Storyboard>
                                          </BeginStoryboard>
                                          <BeginStoryboard>
                                                <Storyboard>
                                                      <DoubleAnimation 
                                                          Storyboard.TargetName="Bd" 
                                                          Storyboard.TargetProperty="(Border.Opacity)"
                                                                   To="1.0" Duration="0:0:3"/>
                                                </Storyboard>
                                          </BeginStoryboard>
                                    </EventTrigger>-->
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

</ResourceDictionary>